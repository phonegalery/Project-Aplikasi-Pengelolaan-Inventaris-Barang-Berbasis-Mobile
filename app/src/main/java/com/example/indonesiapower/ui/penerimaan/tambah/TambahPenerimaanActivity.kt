package com.example.indonesiapower.ui.penerimaan.tambah // Package disesuaikan

import android.app.DatePickerDialog
import android.app.TimePickerDialog
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import com.example.indonesiapower.R
import com.example.indonesiapower.api.ApiResponse
import com.example.indonesiapower.api.RetrofitClient
import com.example.indonesiapower.databinding.ActivityTambahPenerimaanBinding // Binding disesuaikan
import com.example.indonesiapower.model.Penerimaan // Model disesuaikan
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.RequestBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.SimpleDateFormat
import java.util.*

// Nama class diubah menjadi TambahPenerimaanActivity
class TambahPenerimaanActivity : AppCompatActivity() {

    // Binding disesuaikan dengan layout XML penerimaan
    private lateinit var binding: ActivityTambahPenerimaanBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        // Inflate layout yang sesuai
        binding = ActivityTambahPenerimaanBinding.inflate(layoutInflater)
        setContentView(binding.root)
        supportActionBar?.hide()

        // Atur warna status bar
        window.statusBarColor = resources.getColor(R.color.white, theme)
        window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR

        setupAutoGeneratedFields()
        setupListeners()
    }

    private fun setupAutoGeneratedFields() {
        // Generate No. Terima dengan format TR + timestamp
        val timeStamp = SimpleDateFormat("yyyyMMddHHmmss", Locale.getDefault()).format(Date())
        val noTerima = "TR$timeStamp"
        binding.etNoTerima.setText(noTerima)
        binding.etNoTerima.isEnabled = false

        // Atur tanggal dan jam saat ini
        val calendar = Calendar.getInstance()
        val dateFormat = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault())
        val timeFormat = SimpleDateFormat("HH:mm:ss", Locale.getDefault())

        binding.etTanggalTerima.setText(dateFormat.format(calendar.time))
        binding.etJamTerima.setText(timeFormat.format(calendar.time))
    }

    private fun setupListeners() {
        binding.btnKembali.setOnClickListener { finish() }

        binding.btnSimpan.setOnClickListener {
            // Panggil fungsi validasi sebelum menyimpan
            if (validateForm()) {
                savePenerimaan()
            }
        }

        // Listener untuk membuka DatePickerDialog
        binding.etTanggalTerima.setOnClickListener {
            val calendar = Calendar.getInstance()
            val year = calendar.get(Calendar.YEAR)
            val month = calendar.get(Calendar.MONTH)
            val day = calendar.get(Calendar.DAY_OF_MONTH)

            DatePickerDialog(this, { _, selectedYear, selectedMonth, selectedDay ->
                val selectedDate = Calendar.getInstance()
                selectedDate.set(selectedYear, selectedMonth, selectedDay)
                val dateFormat = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault())
                binding.etTanggalTerima.setText(dateFormat.format(selectedDate.time))
            }, year, month, day).show()
        }

        // Listener untuk membuka TimePickerDialog
        binding.etJamTerima.setOnClickListener {
            val calendar = Calendar.getInstance()
            val hour = calendar.get(Calendar.HOUR_OF_DAY)
            val minute = calendar.get(Calendar.MINUTE)

            TimePickerDialog(this, { _, selectedHour, selectedMinute ->
                val selectedTime = String.format("%02d:%02d:00", selectedHour, selectedMinute)
                binding.etJamTerima.setText(selectedTime)
            }, hour, minute, true).show()
        }
    }

    // Validasi disesuaikan untuk form penerimaan
    private fun validateForm(): Boolean {
        var isValid = true

        // Reset error pada setiap field
        binding.etNamaBarang.error = null
        binding.etJenisBarang.error = null
        binding.etJumlah.error = null
        binding.etSupplier.error = null

        if (binding.etNamaBarang.text.isNullOrBlank()) {
            binding.etNamaBarang.error = "Nama barang harus diisi"
            isValid = false
        }

        if (binding.etJenisBarang.text.isNullOrBlank()) {
            binding.etJenisBarang.error = "Jenis barang harus diisi"
            isValid = false
        }

        if (binding.etJumlah.text.isNullOrBlank()) {
            binding.etJumlah.error = "Jumlah harus diisi"
            isValid = false
        } else if (binding.etJumlah.text.toString().toIntOrNull() ?: 0 <= 0) {
            binding.etJumlah.error = "Jumlah harus lebih dari 0"
            isValid = false
        }

        if (binding.etSupplier.text.isNullOrBlank()) {
            binding.etSupplier.error = "Supplier harus diisi"
            isValid = false
        }

        return isValid
    }

    // Fungsi untuk menyimpan data penerimaan
    private fun savePenerimaan() {
        val loadingDialog = LoadingDialog(this)
        loadingDialog.show()

        try {
            // Ambil data dari semua field
            val noTerima = binding.etNoTerima.text.toString().trim()
            val namaBarang = binding.etNamaBarang.text.toString().trim()
            val jenisBarang = binding.etJenisBarang.text.toString().trim()
            val jumlah = binding.etJumlah.text.toString().trim()
            val tanggalTerima = binding.etTanggalTerima.text.toString().trim()
            val jamTerima = binding.etJamTerima.text.toString().trim()
            val supplier = binding.etSupplier.text.toString().trim()
            val catatanTambahan = binding.etCatatanTambahan.text.toString().trim()

            // Buat payload JSON sesuai dengan field di API PHP
            val jsonString = """
                {
                    "no_terima": "$noTerima",
                    "nama_barang": "$namaBarang",
                    "jenis_barang": "$jenisBarang",
                    "jumlah": "$jumlah",
                    "tgl_terima": "$tanggalTerima",
                    "jam_terima": "$jamTerima",
                    "supplier": "$supplier",
                    "catatan_tambahan": "$catatanTambahan"
                }
            """.trimIndent()

            val requestBody = RequestBody.create(
                "application/json; charset=utf-8".toMediaTypeOrNull(),
                jsonString
            )

            // Panggil endpoint API yang sesuai (misal: tambahPenerimaan)
            RetrofitClient.instance.tambahPenerimaan(requestBody).enqueue(object : Callback<ApiResponse<Penerimaan>> {
                override fun onResponse(
                    call: Call<ApiResponse<Penerimaan>>,
                    response: Response<ApiResponse<Penerimaan>>
                ) {
                    loadingDialog.dismiss()

                    if (response.isSuccessful) {
                        response.body()?.let { apiResponse ->
                            if (apiResponse.status == true) {
                                Toast.makeText(
                                    this@TambahPenerimaanActivity,
                                    apiResponse.message ?: "Data penerimaan berhasil disimpan",
                                    Toast.LENGTH_SHORT
                                ).show()
                                setResult(RESULT_OK)
                                finish()
                            } else {
                                showError(apiResponse.message ?: "Gagal menyimpan data")
                            }
                        } ?: showError("Response body is null")
                    } else {
                        val errorMsg = try {
                            response.errorBody()?.string() ?: "Unknown error (${response.code()})"
                        } catch (e: Exception) {
                            "Error reading error body: ${e.message}"
                        }
                        Log.e("TambahPenerimaan", "API Error: $errorMsg")
                        showError("Error: $errorMsg")
                    }
                }

                override fun onFailure(call: Call<ApiResponse<Penerimaan>>, t: Throwable) {
                    loadingDialog.dismiss()
                    Log.e("TambahPenerimaan", "Network error: ${t.message}", t)
                    showError("Network error: ${t.message}")
                }
            })

        } catch (e: Exception) {
            loadingDialog.dismiss()
            Log.e("TambahPenerimaan", "Error: ${e.message}", e)
            showError("Terjadi kesalahan: ${e.message}")
        }
    }

    private fun showError(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
    }
}

// Anda bisa menggunakan kembali kelas LoadingDialog yang sudah ada
// atau memindahkannya ke file terpisah agar bisa diakses dari banyak activity.
class LoadingDialog(private val activity: AppCompatActivity) {
    private val dialog = androidx.appcompat.app.AlertDialog.Builder(activity)
        .setView(R.layout.dialog_loading)
        .setCancelable(false)
        .create()

    fun show() {
        if (!activity.isFinishing && !dialog.isShowing) {
            dialog.show()
        }
    }

    fun dismiss() {
        if (dialog.isShowing) {
            dialog.dismiss()
        }
    }
}
