package com.example.indonesiapower.ui.kategori.tambah

import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import com.example.indonesiapower.R
import com.example.indonesiapower.api.ApiResponse
import com.example.indonesiapower.api.RetrofitClient
import com.example.indonesiapower.databinding.ActivityTambahKategoriBinding
import com.example.indonesiapower.model.Kategori
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.RequestBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.SimpleDateFormat
import java.util.*

class TambahKategoriActivity : AppCompatActivity() {

    private lateinit var binding: ActivityTambahKategoriBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        binding = ActivityTambahKategoriBinding.inflate(layoutInflater)
        setContentView(binding.root)
        supportActionBar?.hide()

        window.statusBarColor = resources.getColor(R.color.white, theme)
        window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR

        setupAutoGeneratedFields()
        setupListeners()
    }

    private fun setupAutoGeneratedFields() {
        // Generate random category code
        val randomKode = (10000000..99999999).random().toString()
        binding.etKodeKategori.setText(randomKode)
        binding.etKodeKategori.isEnabled = false

        // Set current date
        val dateFormat = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault())
        val currentDate = dateFormat.format(Date())
        binding.etDibuatTanggal.setText(currentDate)
        binding.etDibuatTanggal.isEnabled = false
    }

    private fun setupListeners() {
        binding.btnKembali.setOnClickListener { finish() }

        binding.btnSimpan.setOnClickListener {
            if (validateForm()) {
                saveCategory()
            }
        }
    }

    private fun validateForm(): Boolean {
        var isValid = true

        // Reset errors
        binding.etNamaKategori.error = null

        when {
            binding.etNamaKategori.text.isNullOrBlank() -> {
                binding.etNamaKategori.error = "Nama kategori harus diisi"
                isValid = false
            }
            binding.etNamaKategori.text.toString().length < 3 -> {
                binding.etNamaKategori.error = "Nama kategori terlalu pendek (minimal 3 karakter)"
                isValid = false
            }
            binding.etNamaKategori.text.toString().length > 50 -> {
                binding.etNamaKategori.error = "Nama kategori terlalu panjang (maksimal 50 karakter)"
                isValid = false
            }
        }

        return isValid
    }

    private fun saveCategory() {
        val loadingDialog = LoadingDialog(this)
        loadingDialog.show()

        try {
            val kodeKategori = binding.etKodeKategori.text.toString().trim()
            val namaKategori = binding.etNamaKategori.text.toString().trim()
            val dibuatTanggal = binding.etDibuatTanggal.text.toString().trim()

            // Create proper JSON payload
            val jsonString = """
                {
                    "kode_kategori": "$kodeKategori",
                    "nama_kategori": "$namaKategori",
                    "dibuat_tgl": "$dibuatTanggal"
                }
            """.trimIndent()

            val requestBody = RequestBody.create(
                "application/json; charset=utf-8".toMediaTypeOrNull(),
                jsonString
            )

            RetrofitClient.instance.tambahKategori(requestBody).enqueue(object : Callback<ApiResponse<Kategori>> {
                override fun onResponse(
                    call: Call<ApiResponse<Kategori>>,
                    response: Response<ApiResponse<Kategori>>
                ) {
                    loadingDialog.dismiss()

                    if (response.isSuccessful) {
                        response.body()?.let { apiResponse ->
                            if (apiResponse.status == true) {
                                Toast.makeText(
                                    this@TambahKategoriActivity,
                                    apiResponse.message ?: "Data berhasil disimpan",
                                    Toast.LENGTH_SHORT
                                ).show()
                                setResult(RESULT_OK)
                                finish()
                            } else {
                                showError(apiResponse.message ?: "Gagal menyimpan data")
                            }
                        } ?: run {
                            showError("Response body is null")
                        }
                    } else {
                        val errorMsg = try {
                            response.errorBody()?.string() ?: "Unknown error (${response.code()})"
                        } catch (e: Exception) {
                            "Error reading error body: ${e.message}"
                        }
                        Log.e("TambahKategori", "API Error: $errorMsg")
                        showError("Error: $errorMsg")
                    }
                }

                override fun onFailure(call: Call<ApiResponse<Kategori>>, t: Throwable) {
                    loadingDialog.dismiss()
                    Log.e("TambahKategori", "Network error: ${t.message}", t)
                    showError("Network error: ${t.message}")
                }
            })

        } catch (e: Exception) {
            loadingDialog.dismiss()
            Log.e("TambahKategori", "Error: ${e.message}", e)
            showError("Terjadi kesalahan: ${e.message}")
        }
    }

    private fun showError(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }
}

// Simple loading dialog class
class LoadingDialog(private val activity: AppCompatActivity) {
    private val dialog = androidx.appcompat.app.AlertDialog.Builder(activity)
        .setView(R.layout.dialog_loading)
        .setCancelable(false)
        .create()

    fun show() {
        if (!activity.isFinishing && !dialog.isShowing) {
            dialog.show()
        }
    }

    fun dismiss() {
        if (dialog.isShowing) {
            dialog.dismiss()
        }
    }
}